import{_ as t,c as e,o as l,R as d}from"./chunks/framework.DeQ1eoAg.js";const m=JSON.parse('{"title":"API 文档","description":"","frontmatter":{},"headers":[],"relativePath":"api/index.md","filePath":"api/index.md"}'),n={name:"api/index.md"},a=d('<h1 id="api-文档" tabindex="-1">API 文档 <a class="header-anchor" href="#api-文档" aria-label="Permalink to &quot;API 文档&quot;">​</a></h1><h2 id="table-属性" tabindex="-1">Table 属性 <a class="header-anchor" href="#table-属性" aria-label="Permalink to &quot;Table 属性&quot;">​</a></h2><table><thead><tr><th style="text-align:left;"><div style="width:180px;">属性名</div></th><th style="text-align:left;">说明</th><th style="text-align:left;">类型</th><th style="text-align:left;">可选值</th><th style="text-align:left;">默认值</th></tr></thead><tbody><tr><td style="text-align:left;">list</td><td style="text-align:left;">显示的数据</td><td style="text-align:left;">ListItem[]</td><td style="text-align:left;">—</td><td style="text-align:left;">—</td></tr><tr><td style="text-align:left;">columns</td><td style="text-align:left;">列信息集合</td><td style="text-align:left;">Column[]</td><td style="text-align:left;">—</td><td style="text-align:left;">—</td></tr><tr><td style="text-align:left;">row-key</td><td style="text-align:left;">行id变量名 <code>虚拟列表需要，如果不给保证默认值为id</code></td><td style="text-align:left;">String/Number</td><td style="text-align:left;">—</td><td style="text-align:left;">id</td></tr><tr><td style="text-align:left;">row-min-height</td><td style="text-align:left;">行最小高度 <code>虚拟列表需要。如果不给需要保证最小高度不能低于默认值30</code></td><td style="text-align:left;">Number</td><td style="text-align:left;">—</td><td style="text-align:left;">30</td></tr><tr><td style="text-align:left;">show-header</td><td style="text-align:left;">是否显示表头</td><td style="text-align:left;">Boolean</td><td style="text-align:left;">—</td><td style="text-align:left;">true</td></tr><tr><td style="text-align:left;">stripe</td><td style="text-align:left;">是否为斑马纹 table</td><td style="text-align:left;">Boolean</td><td style="text-align:left;">—</td><td style="text-align:left;">false</td></tr><tr><td style="text-align:left;">border</td><td style="text-align:left;">是否带有纵向边框</td><td style="text-align:left;">Boolean</td><td style="text-align:left;">—</td><td style="text-align:left;">false</td></tr><tr><td style="text-align:left;">highlight-current-row</td><td style="text-align:left;">是否要高亮当前行</td><td style="text-align:left;">Boolean</td><td style="text-align:left;">—</td><td style="text-align:left;">false</td></tr><tr><td style="text-align:left;">highlight-current-column</td><td style="text-align:left;">是否要高亮当前列</td><td style="text-align:left;">Boolean</td><td style="text-align:left;">—</td><td style="text-align:left;">false</td></tr><tr><td style="text-align:left;">selection</td><td style="text-align:left;">是否支持框选</td><td style="text-align:left;">Boolean</td><td style="text-align:left;">—</td><td style="text-align:left;">false</td></tr><tr><td style="text-align:left;">default-expand-all</td><td style="text-align:left;">是否默认展开所有行，当 Table 包含展开行存在或者为树形表格时有效</td><td style="text-align:left;">Boolean</td><td style="text-align:left;">—</td><td style="text-align:left;">false</td></tr><tr><td style="text-align:left;">header-row-class-name</td><td style="text-align:left;">表头行自定义类</td><td style="text-align:left;"><code>(data: { row: Column[]; rowIndex: number }): string</code></td><td style="text-align:left;">—</td><td style="text-align:left;"><code>() =&gt; &#39;&#39;</code></td></tr><tr><td style="text-align:left;">header-row-style</td><td style="text-align:left;">表头行自定义样式</td><td style="text-align:left;"><code>(data: { row: Column[]; rowIndex: number }): string</code></td><td style="text-align:left;">—</td><td style="text-align:left;"><code>() =&gt; &#39;&#39;</code></td></tr><tr><td style="text-align:left;">header-cell-class-name</td><td style="text-align:left;">表头单元格自定义类</td><td style="text-align:left;"><code>(data: { row: Column[]; column: Column; rowIndex: number; columnIndex: number }): string</code></td><td style="text-align:left;">—</td><td style="text-align:left;"><code>() =&gt; &#39;&#39;</code></td></tr><tr><td style="text-align:left;">header-cell-style</td><td style="text-align:left;">表头单元格自定义样式</td><td style="text-align:left;"><code>(data: { row: Column[]; column: Column; rowIndex: number; columnIndex: number }): string</code></td><td style="text-align:left;">—</td><td style="text-align:left;"><code>() =&gt; &#39;&#39;</code></td></tr><tr><td style="text-align:left;">row-class-name</td><td style="text-align:left;">行自定义类</td><td style="text-align:left;"><code>(data: { row: ListItem; rowIndex: number }): string</code></td><td style="text-align:left;">—</td><td style="text-align:left;"><code>() =&gt; &#39;&#39;</code></td></tr><tr><td style="text-align:left;">row-style</td><td style="text-align:left;">行自定义样式</td><td style="text-align:left;"><code>(data: { row: ListItem; rowIndex: number }): string</code></td><td style="text-align:left;">—</td><td style="text-align:left;"><code>() =&gt; &#39;&#39;</code></td></tr><tr><td style="text-align:left;">cell-class-name</td><td style="text-align:left;">单元格自定义类</td><td style="text-align:left;"><code>(data: { row: ListItem; column: Column; rowIndex: number; columnIndex: number }): string</code></td><td style="text-align:left;">—</td><td style="text-align:left;"><code>() =&gt; &#39;&#39;</code></td></tr><tr><td style="text-align:left;">cell-style</td><td style="text-align:left;">单元格自定义样式</td><td style="text-align:left;"><code>(data: { row: ListItem; column: Column; rowIndex: number; columnIndex: number }): string</code></td><td style="text-align:left;">—</td><td style="text-align:left;"><code>() =&gt; &#39;&#39;</code></td></tr></tbody></table><h2 id="column-属性" tabindex="-1">Column 属性 <a class="header-anchor" href="#column-属性" aria-label="Permalink to &quot;Column 属性&quot;">​</a></h2><table><thead><tr><th style="text-align:left;"><div style="width:100px;">属性名</div></th><th style="text-align:left;">说明</th><th style="text-align:left;">类型</th><th style="text-align:left;">可选值</th><th style="text-align:left;">默认值</th></tr></thead><tbody><tr><td style="text-align:left;">id</td><td style="text-align:left;">必传</td><td style="text-align:left;">string|number</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">title</td><td style="text-align:left;">显示的标题</td><td style="text-align:left;">string</td><td style="text-align:left;">—</td><td style="text-align:left;">—</td></tr><tr><td style="text-align:left;">type</td><td style="text-align:left;">对应列的类型。 如果设置了<code> index</code> 则显示该行的索引（从 1 开始计算）； 如果设置了<code> expand</code> 则显示为一个可展开的按钮；如果设置了<code>checkbox</code>则显示多选框；</td><td style="text-align:left;">string</td><td style="text-align:left;">index / expand / checkbox</td><td style="text-align:left;">—</td></tr><tr><td style="text-align:left;">index</td><td style="text-align:left;">如果设置了 <code>type=index</code>，可以通过传递 <code>index</code> 属性来自定义索引</td><td style="text-align:left;">number / function(index)</td><td style="text-align:left;">—</td><td style="text-align:left;">—</td></tr><tr><td style="text-align:left;">field</td><td style="text-align:left;">字段名称：对应列内容的字段名</td><td style="text-align:left;">string|number</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">width</td><td style="text-align:left;">对应列的宽度</td><td style="text-align:left;">number</td><td style="text-align:left;">—</td><td style="text-align:left;">—</td></tr><tr><td style="text-align:left;">min-width</td><td style="text-align:left;">当设置 resizable 时，对应列的最小宽度</td><td style="text-align:left;">number</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">max-width</td><td style="text-align:left;">当设置 resizable 时，对应列的最大宽度</td><td style="text-align:left;">number</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">resizable</td><td style="text-align:left;">对应列是否可以通过拖动改变宽度（当 border 属性为 false 时，仍然支持调整列宽，但表头会单独显示右边框线）</td><td style="text-align:left;">Boolean</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">fixed</td><td style="text-align:left;">列是否固定在左侧或者右侧。</td><td style="text-align:left;">string</td><td style="text-align:left;">&#39;left&#39; / &#39;right&#39; / &#39;&#39;</td><td style="text-align:left;">—</td></tr><tr><td style="text-align:left;">align</td><td style="text-align:left;">表格的对齐方式（表头和表身）</td><td style="text-align:left;">string</td><td style="text-align:left;">left / center / right</td><td style="text-align:left;">left</td></tr><tr><td style="text-align:left;">header-align</td><td style="text-align:left;">表头对齐方式， 若不设置该项，则使用表格的对齐方式</td><td style="text-align:left;">string</td><td style="text-align:left;">left / center / right</td><td style="text-align:left;">—</td></tr><tr><td style="text-align:left;">children</td><td style="text-align:left;">嵌套列</td><td style="text-align:left;">Column[]</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">class-name</td><td style="text-align:left;">列的 className</td><td style="text-align:left;">string</td><td style="text-align:left;">—</td><td style="text-align:left;">—</td></tr><tr><td style="text-align:left;">header-render</td><td style="text-align:left;">自定义渲染表头单元格</td><td style="text-align:left;">function(column)</td><td style="text-align:left;">—</td><td style="text-align:left;">—</td></tr><tr><td style="text-align:left;">body-render</td><td style="text-align:left;">自定义渲染变身单元格</td><td style="text-align:left;">function(column, row)</td><td style="text-align:left;">—</td><td style="text-align:left;">—</td></tr></tbody></table><h2 id="table-事件" tabindex="-1">Table 事件 <a class="header-anchor" href="#table-事件" aria-label="Permalink to &quot;Table 事件&quot;">​</a></h2><table><thead><tr><th><div style="width:140px;">事件名</div></th><th style="text-align:left;">说明</th><th>回调参数</th></tr></thead><tbody><tr><td>header-click</td><td style="text-align:left;">当某一列的表头被点击时会触发该事件</td><td><code>data: { event, column }</code></td></tr><tr><td>header-dblclick</td><td style="text-align:left;">当某一列的表头被双击时会触发该事件</td><td><code>data: { event, column }</code></td></tr><tr><td>header-contextmenu</td><td style="text-align:left;">当某一列的表头被鼠标右键点击时触发该事件</td><td><code>data: { event, column }</code></td></tr><tr><td>row-click</td><td style="text-align:left;">当某一行被点击时会触发该事件</td><td><code>data: { event, column, columnIndex, row rowIndex }</code></td></tr><tr><td>row-dblclick</td><td style="text-align:left;">当某一行被双击时会触发该事件</td><td><code>data: { event, column, columnIndex, row rowIndex }</code></td></tr><tr><td>row-contextmenu</td><td style="text-align:left;">当某一行被鼠标右键点击时会触发该事件</td><td><code>data: { event, column, columnIndex, row rowIndex }</code></td></tr><tr><td>cell-click</td><td style="text-align:left;">当某个单元格被点击时会触发该事件</td><td><code>data: { event, column, columnIndex, row, rowIndex, cell }</code></td></tr><tr><td>cell-dblclick</td><td style="text-align:left;">当某个单元格被双击击时会触发该事件</td><td><code>data: { event, column, columnIndex, row, rowIndex, cell }</code></td></tr><tr><td>cell-contextmenu</td><td style="text-align:left;">当某个单元格被鼠标右键点击时会触发该事件</td><td><code>data: { event, column, columnIndex, row, rowIndex, cell }</code></td></tr><tr><td>expand-change</td><td style="text-align:left;">当用户对某一行展开或者关闭的时候会触发该事件（展开行时，回调的第二个参数为 expandedRows；树形表格时第二参数为 expanded）</td><td><code>data: { row, expandedRows }</code></td></tr><tr><td>box-selection</td><td style="text-align:left;">当selection选中区域的时候触发该事件</td><td><code>data: { areas: area[], cells: [] }</code></td></tr></tbody></table>',7),i=[a];function s(x,r,g,o,f,y){return l(),e("div",null,i)}const h=t(n,[["render",s]]);export{m as __pageData,h as default};
